# Azure Pipeline that run basic continuous deployment on a Terraform project

# This pipeline should be trigger by a PR

variables:
  # Set the environement
  Environment: $(environement)
  # There must be an Azure Service Connection with that name defined in your Azure DevOps settings. See https://docs.microsoft.com/en-us/azure/devops/pipelines/library/connect-to-azure?view=azure-devops
  serviceConnection: $(serviceConnection)
  azureLocation: $(location)
  # Terraform settings
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  terraformVariablesPath: '$(System.DefaultWorkingDirectory)/terraform/parameters'
  terraformBackendPath: '$(System.DefaultWorkingDirectory)/terraform/backend'
  terraformVersion: '1.0.0'

stages:
  - stage: TerraformContinuousIntegration
    displayName: Terraform Module - CI
    jobs:
    - job: TerraformContinuousIntegrationJob
      displayName: TerraformContinuousIntegration - CI Job
      pool:
        vmImage: ubuntu-20.04
      steps:
      # Step 1: run the Terrascan Static Code Analysis
      - script: |
          curl --location https://github.com/accurics/terrascan/releases/download/v1.3.1/terrascan_1.3.1_Linux_x86_64.tar.gz --output terrascan.tar.gz
          tar -xvf terrascan.tar.gz
          sudo install terrascan /usr/local/bin
        displayName: Install Terrascan Static Code Analysis
      - script: |
          terrascan scan -t azure -i terraform
        workingDirectory: $(terraformWorkingDirectory)
        displayName: 'Run Terrascan Static Code Analysis'         
      # Step 2: install Terraform on the Azure Pipelines agent
      - task: TerraformInstaller@0
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: $(terraformVersion)
      # Step 3: run Terraform init to initialize the workspace
      - task: TerraformCLI@0
        displayName: 'Run terraform init'
        inputs:
          command: init
          workingDirectory: $(terraformWorkingDirectory)
          commandOptions: '-backend-config="$(terraformBackendPath)/$(Environment)-backend.tfvars"'           
      # Step 4: run Terraform validate to validate HCL syntax
      - task: TerraformCLI@0
        displayName: 'Run terraform validate'
        inputs:
          command: validate
          workingDirectory: $(terraformWorkingDirectory)
      # Step 5: run Terraform plan to validate HCL syntax
      - task: TerraformCLI@0
        displayName: 'Run terraform plan'
        inputs:
          command: plan
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceName: $(serviceConnection)
          commandOptions: '-input=false -var-file="$(terraformVariablesPath)/$(Environment)-env.tfvars"'