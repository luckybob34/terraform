# Azure Pipeline that run basic continuous integration on a Terraform project

# This makes sure the pipeline is triggered every time code is pushed in the main branch
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - $(buildPath)/*

variables:
  # Set the environement
  Environment: $(environement)
  # There must be an Azure Service Connection with that name defined in your Azure DevOps settings. See https://docs.microsoft.com/en-us/azure/devops/pipelines/library/connect-to-azure?view=azure-devops
  serviceConnection: $(serviceConnection)
  azureLocation: $(location)
  # Terraform settings
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  terraformVariablesPath: '$(System.DefaultWorkingDirectory)/terraform/parameters'
  terraformBackendPath: '$(System.DefaultWorkingDirectory)/terraform/backend'
  terraformVersion: '1.0.0'

stages:
  - stage: TerraformContinuousDeployment
    displayName: Terraform Module - CD
    jobs:
    - job: TerraformContinuousDeploymentJob
      displayName: TerraformContinuousDeployment - CD Job
      pool:
        vmImage: ubuntu-20.04
      steps:
      # Step 1: install Terraform on the Azure Pipelines agent
      - task: TerraformInstaller@0
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: $(terraformVersion)
      # Step 2: run Terraform init to initialize the workspace
      - task: TerraformCLI@0
        displayName: 'Run terraform init'
        inputs:
          command: init
          workingDirectory: $(terraformWorkingDirectory)
          commandOptions: '-backend-config="$(terraformBackendPath)/$(Environment)-backend.tfvars"'                 
      # Step 3: run Terraform plan to validate HCL syntax
      - task: TerraformCLI@0
        displayName: 'Run terraform plan'
        inputs:
          command: plan
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceName: $(serviceConnection)
          commandOptions: '-input=false -var-file="$(terraformVariablesPath)/$(Environment)-env.tfvars"'          
      # Step 4: run Terraform apply to deploy resources
      - task: TerraformCLI@0
        displayName: 'Run terraform apply'
        inputs:
          command: apply
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceName: $(serviceConnection)
          commandOptions: '-input=false -var-file="$(terraformVariablesPath)/$(Environment)-env.tfvars"'                          